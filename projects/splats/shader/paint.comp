#version 450

#include "../shared.h"

#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

layout( local_size_x = 4, local_size_y = 4) in;

layout (std430, binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout (std430, binding = 1) buffer FrameBuffer {
  uint64_t framebuffer[];
};

layout (binding = 2, rgba8) uniform writeonly image2D output_image;

vec4 colorAt(vec2 pos, vec2 dims) {
  if (any(lessThan(pos, vec2(0.0))) || any(greaterThanEqual(pos, dims))) {
    return vec4(0.0);
  }

  uint id = int(pos.x + pos.y * dims.x);
  uint64_t v = framebuffer[id];
  framebuffer[id] = 0xffffffffff000000UL;

  uint ucol = uint(v & 0x00FFFFFFUL);
  vec4 color = v >= 0xFFFFFFFFFF000000UL
    ? vec4(0.0)
    : vec4(
        float((ucol & 0xFF0000) >> 16)  / 255.0,
        float((ucol & 0xFF00) >> 8)  / 255.0,
        float((ucol & 0xFF) >> 0)  / 255.0,
        1.0
      );
  return color;
}

void main() {
  vec2 dims = ubo.scene.screen_dims.xy;
  vec2 pos = vec2(gl_GlobalInvocationID.xy);

  vec4 color = colorAt(pos, dims);


  imageStore(
    output_image,
    ivec2(gl_GlobalInvocationID.xy),
    color
  );
}