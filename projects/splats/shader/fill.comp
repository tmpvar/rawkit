#version 450

#include "../shared.h"

layout( local_size_x = 4, local_size_y = 4, local_size_z = 4 ) in;

layout (std430, binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout(std430, binding = 1) buffer PointBuffer {
	Point points[];
};

layout(std430, binding = 2) buffer PointStateBuffer {
	PointState point_state;
};

// sdUberprim with precomputed constants
float sdUnterprim(vec3 p, vec4 s, vec3 r, vec2 ba, float sz2) {
    vec3 d = abs(p) - s.xyz;
    float q = length(max(d.xy, 0.0)) + min(0.0,max(d.x,d.y)) - r.x;
    // hole support: without this line, all results are convex
#ifndef CONVEX
    q = abs(q) - s.w;
#endif

    vec2 pa = vec2(q, p.z - s.z);
    vec2 diag = pa - vec2(r.z,sz2) * clamp(dot(pa,ba), 0.0, 1.0);
    vec2 h0 = vec2(max(q - r.z,0.0),p.z + s.z);
    vec2 h1 = vec2(max(q,0.0),p.z - s.z);

    return sqrt(min(dot(diag,diag),min(dot(h0,h0),dot(h1,h1))))
        * sign(max(dot(pa,vec2(-ba.y, ba.x)), d.z)) - r.y;
}

// s: width, height, depth, thickness
// r: xy corner radius, z corner radius, bottom radius offset
float sdUberprim(vec3 p, vec4 s, vec3 r) {
    // these operations can be precomputed
    s.xy -= r.x;
#ifdef CONVEX
    r.x -= r.y;
#else
    r.x -= s.w;
    s.w -= r.y;
#endif
    s.z -= r.y;
    vec2 ba = vec2(r.z, -2.0*s.z);
    return sdUnterprim(p, s, r, ba/dot(ba,ba), ba.y);
}

// example parameters
#define SHAPE_COUNT 9.0
void getfactor (int i, out vec4 s, out vec3 r) {
    //i = 4;
    if (i == 0) { // cube
        s = vec4(1.0);
        r = vec3(0.0);
    } else if (i == 1) { // cylinder
        s = vec4(1.0);
        r = vec3(1.0,0.0,0.0);
    } else if (i == 2) { // cone
        s = vec4(0.0,0.0,1.0,1.0);
        r = vec3(0.0,0.0,1.0);
	} else if (i == 3) { // pill
        s = vec4(1.0,1.0,2.0,1.0);
        r = vec3(1.0,1.0,0.0);
    } else if (i == 4) { // sphere
        s = vec4(1.0);
        r = vec3(1.0,1.0,0.0);
    } else if (i == 5) { // pellet
        s = vec4(1.0,1.0,0.25,1.0);
        r = vec3(1.0,0.25,0.0);
    } else if (i == 6) { // torus
        s = vec4(1.0,1.0,0.25,0.25);
        r = vec3(1.0,0.25,0.0);
    } else if (i == 7) { // pipe
        s = vec4(vec3(1.0),0.25);
        r = vec3(1.0,0.1,0.0);
    } else if (i == 8) { // corridor
        s = vec4(vec3(1.0),0.25);
        r = vec3(0.1,0.1,0.0);
	}
}

float doModel( vec3 p ) {
    float k = float(ubo.scene.time)*0.5;
    float u = smoothstep(0.0,1.0,smoothstep(0.0,1.0,fract(k)));
    int s1 = int(mod(k,SHAPE_COUNT));
    int s2 = int(mod(k+1.0,SHAPE_COUNT));

    vec4 sa,sb;
    vec3 ra,rb;
    getfactor(s1,sa,ra);
    getfactor(s2,sb,rb);
    return sdUberprim(p.zyx, mix(sa,sb,u), mix(ra,rb,u));
}


vec3 calcNormal( in vec3 p )
{
  const float h = 0.0001; // replace by an appropriate value
  const vec2 k = vec2(1,-1);
  return normalize( k.xyy*doModel( p + k.xyy*h ) +
                    k.yyx*doModel( p + k.yyx*h ) +
                    k.yxy*doModel( p + k.yxy*h ) +
                    k.xxx*doModel( p + k.xxx*h ) );
}

void main() {
  vec3 dims = vec3(255.0);
  vec3 hd = dims * 0.5;
  uvec3 p = gl_GlobalInvocationID.xyz;

  vec3 pos = vec3(p);

  if (any(lessThan(pos, vec3(0.0))) || any(greaterThanEqual(pos, dims))) {
    return;
  }
  vec3 samplePos = (vec3(p) - hd) / 64.0;
  float d = doModel(samplePos);
  // float d = distance(pos, dims * 0.5) - 100.0;
  if (d <= 0.0 && d > -.025) {
    vec3 normal = calcNormal(samplePos);

    if (dot(normal, vec3(p) - ubo.scene.eye.xyz) > 0.5) {
      return;
    }

    uint idx = atomicAdd(point_state.dispatch.x, 1);
    points[idx].normal = vec4(normal, d);
    points[idx].x = pos.x;
    points[idx].y = pos.y;
    points[idx].z = pos.z;
    points[idx].color = 0x99FFAA;
  }
}