#version 450

#include "../shared.h"

layout( local_size_x = 128, local_size_y = 6, local_size_z = 1 ) in;

layout (std430, binding = 1) uniform UBO {
  world_ubo_t data;
} ubo;

layout(binding = 2) uniform sampler3D world_texture;
layout(binding = 3) uniform sampler3D world_occlusion_texture;
layout(binding = 4) uniform sampler2D blue_noise;

layout(std430, binding = 5) buffer VisibleVoxels {
	visible_voxel voxels[];
};

ray_hit_t march_first_contact(scene_t scene, in vec3 pos, in vec3 dir, float max_acc_density) {
  float max_distance = 2.0;

  ray_hit_t ret;
  ret.color = vec4(0.0);
  ret.density = 0.0;
  ret.pos = pos;
  ret.pos -= dir * 0.1;

  vec3 mapPos = vec3(floor(pos));
  vec3 deltaDist = abs(vec3(length(dir)) / dir);
  vec3 rayStep = sign(dir);
  vec3 initial = pos;
  float dist = 0.0;
  vec3 sideDist = (sign(dir) * (mapPos - pos) + (sign(dir) * 0.5) + 0.5) * deltaDist;
  vec3 mask = step(sideDist.xyz, sideDist.yzx) * step(sideDist.xyz, sideDist.zxy);

  float hit = 0.0;
  vec3 prevPos = pos;
  vec3 ratio = 1.0 / ubo.data.world_dims.xyz;
  float max_iterations = length(ubo.data.world_dims.xyz);
  for (int iterations = 0; iterations < max_iterations; iterations++) {
    if (all(greaterThanEqual(mapPos, vec3(0))) && all(lessThan(mapPos, ubo.data.world_dims.xyz))) {
      vec3 p = mapPos * ratio;
      float density = texture(world_occlusion_texture, p).r;
      ret.density += density;
      ret.color += texture(world_texture, p) * density;
      if (ret.density > max_acc_density) {
        break;
      }
    }
    mask = step(sideDist.xyz, sideDist.yzx) * step(sideDist.xyz, sideDist.zxy);
    sideDist += mask * deltaDist;
    mapPos += mask * rayStep;
  }

  // Note: this causes entire voxels to return the same coords
  ret.pos = floor(mapPos) + 0.5;

  return ret;
}

vec3 face_normals[6] = vec3[6](
  vec3(-1.0,  0.0,  0.0),
  vec3( 0.0, -1.0,  0.0),
  vec3( 0.0,  0.0, -1.0),
  vec3( 1.0,  0.0,  0.0),
  vec3( 0.0,  1.0,  0.0),
  vec3( 0.0,  0.0,  1.0)
);

vec3 normal_from_face_index(uint face) {
  return face_normals[face];
}

ray_hit_t process_face(const visible_voxel voxel, uint face, vec3 dir) {
  vec3 dims = ubo.data.world_dims.xyz;
  vec3 pos = voxel.pos.xyz;

  // vec3 dir = normalize(target - pos);
  vec3 normal = normal_from_face_index(face);
  vec3 surface_pos = pos + normal;

  scene_t scene;
  scene.grid_dims = ubo.data.world_dims.xyz;
  scene.inv_grid_dims = 1.0 / scene.grid_dims;
  return march_first_contact(scene, surface_pos, dir, 1.0);
}

float t = ubo.data.time * 0.5;

void main() {
  uint idx = gl_GlobalInvocationID.x;
  const visible_voxel voxel = voxels[idx];
  uint face = gl_GlobalInvocationID.y;
  vec3 voxel_pos = voxel.pos.xyz;
  vec3 world_dims = ubo.data.world_dims.xyz;
  vec3 half_world_dims = world_dims * 0.5;
  vec3 eye = ubo.data.eye.xyz * world_dims + half_world_dims;
  vec3 sun_pos = vec3(
    sin(t) * 2.0,
    2.0,
    cos(t) * 2.0
  ) * world_dims + half_world_dims;

  vec3 normal = normal_from_face_index(face);
  vec3 surface_pos = voxel_pos + normal;
  vec3 primary_dir = normalize(surface_pos - eye);

  vec3 reflect_dir = normalize(reflect(primary_dir, normal));

  ray_hit_t sun_hit = process_face(voxel, face, normalize(sun_pos - surface_pos));
  ray_hit_t reflect_hit = process_face(voxel, face, reflect_dir);

  vec4 color = texture(world_texture, voxel_pos / world_dims);
  color -= sun_hit.density * 0.25;
  color += reflect_hit.color * 0.1;
  voxels[idx].face_color[face] = color;
}