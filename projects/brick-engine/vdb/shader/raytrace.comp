#version 450


#include "../shared.h"

layout (local_size_x = 8, local_size_y = 8) in;

layout (std430, binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout(std430, binding = 1) readonly buffer Data {
  uint pnanovdb_buf_data[];
};

layout (binding = 2, rgba32f) uniform writeonly image2D tex_color;

#include "../vdb.h"

vec3 hsl( float h, float s, float l) {
  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
  return l + s * (rgb-0.5)*(1.0-abs(2.0*l-1.0));
}


void writeColor(vec3 val) {
  imageStore(tex_color, ivec2(gl_GlobalInvocationID.xy), vec4(val, 1.0));
}

void fillRect(vec2 lb, vec2 dim, vec3 col) {
  vec2 ub = lb + dim;
  for (float x=lb.x; x<=ub.x; x++) {
    for (float y=lb.y; y<=ub.y; y++) {
      imageStore(tex_color, ivec2(x, y), vec4(col, 1.0));
    }
  }
}

void main() {
  vec2 pos = gl_GlobalInvocationID.xy;
  vec2 dims = ubo.scene.screen_dims.xy;
  float aspect = dims.x / dims.y;
  vec2 uv = (pos / dims) * 2.0 - 1.0;
  vec3 ro = ubo.scene.eye.xyz;
  vec3 rd = (vec4(
    uv.x * ubo.scene.pixel_size * aspect,
    uv.y * ubo.scene.pixel_size,
    -1.0,
    1.0
  ) * ubo.scene.view).xyz;

  pnanovdb_hdda_t hdda;
  pnanovdb_hdda_init(
    hdda,
    ro,
    0.1,
    rd,
    10000,
    3// dim???
  );
  pnanovdb_buf_t buf;

  pnanovdb_grid_handle_t grid;
  grid.address.byte_offset = 0;

  pnanovdb_tree_handle_t tree = pnanovdb_grid_get_tree(
    buf,
    grid
  );

  pnanovdb_readaccessor_t acc;
  pnanovdb_readaccessor_init(
    acc,
    pnanovdb_tree_get_root(buf, tree)
  );
  float thit = 0.0;
  float value;

  bool hit = pnanovdb_hdda_zero_crossing(
    pnanovdb_grid_get_grid_type(buf, grid), // grid_type,
    buf,
    acc,
    ro,
    0.1, // tmin
    rd,
    10000.0, // tmax
    thit,
    value
  );



  writeColor(vec3(0.0, 0.0, 0.0));
  if (hit) {
    vec3 hit_pos = ro + rd * thit;
    writeColor(abs(hit_pos / 1000));

  }
  // if ( == 1) {
  //   writeColor(vec3(1.0, 1.0, 1.0));
  // }

  // if (pnanovdb_buf_len > 1024*1024*100) {
  //   writeColor(vec3(1.0, 0.0, 1.0));
  // }

  // writeColor(
  //   hsl(
  //     float(pnanovdb_buf_data[0]) / 255.0,
  //     0.9,
  //     0.6
  //   )
  // );

}