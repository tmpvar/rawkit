#version 450


#include "../shared.h"

layout (local_size_x = 8, local_size_y = 8) in;

layout (std430, binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout(std430, binding = 1) readonly buffer Data {
  uint pnanovdb_buf_data[];
};

layout (binding = 2, rgba32f) uniform writeonly image2D tex_color;

#include "../vdb.h"

vec3 hsl( float h, float s, float l) {
  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
  return l + s * (rgb-0.5)*(1.0-abs(2.0*l-1.0));
}

void writeColor(vec3 val) {
  imageStore(tex_color, ivec2(gl_GlobalInvocationID.xy), vec4(val, 1.0));
}

vec2 ray_aabb(vec3 lb, vec3 ub, vec3 origin, vec3 invDir) {
  vec3 tbot = invDir * (lb - origin);
  vec3 ttop = invDir * (ub - origin);
  vec3 tmin = min(ttop, tbot);
  vec3 tmax = max(ttop, tbot);
  vec2 t = max(tmin.xx, tmin.yz);
  float t0 = max(t.x, t.y);
  t = min(tmax.xx, tmax.yz);
  float t1 = min(t.x, t.y);

  return t1 > max(t0, 0.0) ? vec2(t0, t1) : vec2(-1.0);
}

void fillRect(vec2 lb, vec2 dim, vec3 col) {
  vec2 ub = lb + dim;
  for (float x=lb.x; x<=ub.x; x++) {
    for (float y=lb.y; y<=ub.y; y++) {
      imageStore(tex_color, ivec2(x, y), vec4(col, 1.0));
    }
  }
}

void main() {
  vec2 pos = gl_GlobalInvocationID.xy;
  vec2 dims = ubo.scene.screen_dims.xy;
  float aspect = dims.x / dims.y;
  vec2 uv = (pos / dims) * 2.0 - 1.0;
  vec3 ro = ubo.scene.eye.xyz;
  vec3 rd = (vec4(
    uv.x * ubo.scene.pixel_size * aspect,
    uv.y * ubo.scene.pixel_size,
    -1.0,
    1.0
  ) * ubo.scene.view).xyz;
  vec3 ird = 1.0 /rd;

  bool hit = false;
  i32 steps = 64;
  float t = 0.0;
  float r = 256.0;
  while(!hit && steps-- > 0) {
    vec3 lro = ro + rd * t;

    // the volume domain is -32.0..32.0
    vec3 center = (floor(lro / r)) * r;//floor(lro / r) * r;
    // vec3 center = mod(lro, r)
    vec2 isect = ray_aabb(
      center - r,
      center + r,
      ro,
      ird
    );

    if (isect.y < 0.0) {
      writeColor(vec3(1.0, 0.0, 0.0));
      return;
    } else {
      writeColor(vec3(0.0, 0.0, 0.0));
      // writeColor((center - (ro + rd * isect.y)) * 0.5 + 0.5);
    }


    pnanovdb_buf_t buf;

    pnanovdb_grid_handle_t grid;
    grid.address.byte_offset = 0;
    pnanovdb_tree_handle_t tree = pnanovdb_grid_get_tree(
      buf,
      grid
    );

    pnanovdb_readaccessor_t acc;
    pnanovdb_readaccessor_init(
      acc,
      pnanovdb_tree_get_root(buf, tree)
    );
    float thit = 0.0;
    float value;

    // not inside
    if (isect.x < 0.0) {
      // t = isect.y * 0.99;
      // continue;
      lro = ro - center - r * 0.5;
    } else {
      lro = ro + rd * isect.x;
      lro = lro - center - r * 0.5;
    }


    hit = pnanovdb_hdda_zero_crossing(
      pnanovdb_grid_get_grid_type(buf, grid), // grid_type,
      buf,
      acc,
      lro,
      //(mod(lro, r) * 0.5) - r * 0.25,
      // (mod(lro, r) / r) - r,
      0.001, // tmin
      rd,
      10000.0, // tmax
      thit,
      value
    );

    // writeColor(vec3(0.0, 0.0, 0.0));
    if (hit) {
      vec3 hit_pos = (lro + rd * thit);
      writeColor(abs(mod(hit_pos - center - r * 0.5, r)) / r);
      break;
    }

    t += 64.0;//isect.y * 0.99;//8.0;//thit;//max(isect.x, isect.y);
  }

  // if ( == 1) {
  //   writeColor(vec3(1.0, 1.0, 1.0));
  // }

  // if (pnanovdb_buf_len > 1024*1024*100) {
  //   writeColor(vec3(1.0, 0.0, 1.0));
  // }

  // writeColor(
  //   hsl(
  //     float(pnanovdb_buf_data[0]) / 255.0,
  //     0.9,
  //     0.6
  //   )
  // );

}