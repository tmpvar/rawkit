#version 450
#include "../../svo.h"
#include "quadric-proj.glsl"
#include "dda-cursor.glsl"

#extension GL_EXT_scalar_block_layout : enable

#define PI 3.14159265

layout (local_size_x = 8, local_size_y = 8) in;

layout (std430, binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout(std430, binding = 1) readonly buffer NodeTree {
  InnerNode nodes[];
};

layout(std430, binding = 2) readonly buffer NodePositions {
  vec4 node_positions[];
};

layout (binding = 3, rgba32f) uniform writeonly image2D color;


vec3 hsl( in vec3 c ) {
  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
  return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));
}

void writeColor(vec3 val) {
  imageStore(color, ivec2(gl_GlobalInvocationID.xy), vec4(val, 1.0));
}

bool ray_aabb(vec3 lb, vec3 ub, vec3 origin, vec3 invDir, out float tMin, out float tMax) {
  vec3 tbot = invDir * (lb - origin);
  vec3 ttop = invDir * (ub - origin);
  vec3 tmin = min(ttop, tbot);
  vec3 tmax = max(ttop, tbot);
  vec2 t = max(tmin.xx, tmin.yz);
  float t0 = max(t.x, t.y);
  t = min(tmax.xx, tmax.yz);
  float t1 = min(t.x, t.y);
  tMin = t0;
  tMax = t1;
  return t1 > max(t0, 0.0);
}

struct stack_entry {
  vec4 node; // xyz center, w radius
  float tmin;
  float tmax;
  u32 index;
  u32 valid;
};

struct stack {
  u32 cur;
  stack_entry entries[32];
};

stack stack_push(in stack s, i32 index, vec4 node, float tmin, float tmax) {
  s.entries[s.cur].node = node;
  s.entries[s.cur].tmin = tmin;
  s.entries[s.cur].tmax = tmax;
  s.entries[s.cur].index = index;
  s.entries[s.cur].valid = 1;
  s.cur++;
  return s;
}

stack stack_pop(in stack s, out stack_entry e) {
  if (s.cur < 1) {
    stack_entry invalid;
    invalid.valid = 0;
    e = invalid;
    return s;
  }

  s.cur--;
  e = s.entries[s.cur];
  return s;
}

u32 stack_size(const in stack s) {
  return s.cur;
}

// see: https://www.shadertoy.com/view/MlBfRV
bool traverse_shadertoy_warvstar(vec3 origin, vec3 dir, vec3 inv_dir) {
	vec3 center = ubo.scene.tree_center;
  float scale = ubo.scene.tree_radius;
	vec3 minBox = center - scale;
	vec3 maxBox = center + scale;
	vec4 f = vec4(1.0f);
  struct Stack {
		int index;
		vec3 center;
		float scale;
	};
  Stack stack[32];

  int stackPos = 1;
  int index = 0;
  const float flt_max = intBitsToFloat(2139095039);
  float tMin = flt_max;
  float t = 0.0;
  stack[0] = Stack( 0, center, scale);

  float steps = 0.0;

  vec4 resolvedColor;
  bool hit = false;
  while(stackPos-- > 0) {
    steps++;
    center = stack[stackPos].center;
    index = stack[stackPos].index;
    scale = stack[stackPos].scale;
    float new_scale = scale*0.5f;

    float sizeOnScreen;
    vec4 posOnScreen;
    quadricProj(
      center,
      new_scale,
      ubo.scene.worldToScreen,
      ubo.scene.screen_dims.xy,
      posOnScreen,
      sizeOnScreen
    );

    for (int i = 0; i < 8; ++i) {
      vec3 new_center = center + vec3(
        (i & 1<<0) == 0 ? -new_scale : new_scale,
        (i & 1<<1) == 0 ? -new_scale : new_scale,
        (i & 1<<2) == 0 ? -new_scale : new_scale
      );
      vec3 minBox = new_center - new_scale;
      vec3 maxBox = new_center + new_scale;

      float local_tMin;
      float tMax;
      if (!ray_aabb(minBox, maxBox, origin, inv_dir, local_tMin, tMax)) {
        continue;
      }

      int v = nodes[index].children[i];
      if (v == 0 || sizeOnScreen < 2.0){
        if (tMax < tMin) {
          resolvedColor = vec4(
            //normalize(ubo.scene.tree_center - new_center) * 0.5 + 0.5,
            hsl(vec3(0.5 + steps/100.0 * 0.2, 0.9, 0.6)),
            1.0
          );
          tMin = tMax;
        }
      } else if (v > 0) {
        stack[stackPos++] = Stack( v, new_center, new_scale);
      }
    }
  }

  if (tMin < flt_max) {
    imageStore(color, ivec2(gl_GlobalInvocationID.xy), resolvedColor);
  }
  return false;
}

bool traverse_efficient_svo(vec3 p, vec3 d, vec3 inv_dir) {
  // const int s_max = 23; // Maximum scale (number of float mantissa bits).
  // const float epsilon = exp2(-float(s_max));

  // i32 stack[s_max + 1]; // Stack of parent voxels (local mem).
  // // Get rid of small ray direction components to avoid division by zero.
  // if (abs(d.x) < epsilon) d.x = epsilon * sign(d.x);
  // if (abs(d.y) < epsilon) d.y = epsilon * sign(d.y);
  // if (abs(d.z) < epsilon) d.z = epsilon * sign(d.z);
  // // Precompute the coefficients of tx(x), ty(y), and tz(z).
  // // The octree is assumed to reside at coordinates [1, 2].
  // float tx_coef = 1.0f / -abs(d.x);
  // float ty_coef = 1.0f / -abs(d.y);
  // float tz_coef = 1.0f / -abs(d.z);
  // float tx_bias = tx_coef * p.x;
  // float ty_bias = ty_coef * p.y;
  // float tz_bias = tz_coef * p.z;


  // // imageStore(color, ivec2(gl_GlobalInvocationID.xy), resolvedColor);
  // u32 octant_mask = 7;
  // if (d.x > 0.0) {
  //   octant_mask ^= 1;
  //   tx_bias = 3.0 * tx_coef - tx_bias;
  // }

  // if (d.y > 0.0) {
  //   octant_mask ^= 2;
  //   ty_bias = 3.0 * ty_coef - ty_bias;
  // }

  // if (d.z > 0.0) {
  //   octant_mask ^= 4;
  //   tz_bias = 3.0 * tz_coef - tz_bias;
  // }

  // float t_min = max(
  //   max(
  //     2.0 * tx_coef - tx_bias,
  //     2.0 * ty_coef - ty_bias
  //   ),
  //   2.0 * tz_coef - tz_bias
  // );

  // float t_max = min(
  //   min(
  //     tx_coef - tx_bias,
  //     ty_coef - ty_bias
  //   ),
  //   tz_coef - tz_bias
  // );

  // float h = t_max;
  // t_min = max(t_min, 0.0);
  // t_max = min(t_max, 1.0);

  // i32 sentinel = 100;
  // while (scale < s_max && sentinel--) {
  //   // TODO: i skipped the child_descriptor setup because i'm assuming that root is index 0


  // }


  return true;
}

// An Efficient Parametric Algorithm for Octree Traversal
// - http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf
struct Interval {
  vec3 lb;
  vec3 ub;
};

i32 closest_child(
  vec3 parent_center,
  float parent_radius,
  vec3 ray_origin,
  vec3 ray_dir,
  vec3 ray_inv_dir,
  out vec2 ray_interval
) {
  float diameter = parent_radius * 2.0;
  float t_min = 0.0;
  float t_max = 0.0;
  bool hit = ray_aabb(
    (parent_center - parent_radius),
    (parent_center + parent_radius),
    ray_origin,
    ray_inv_dir,
    t_min,
    t_max
  );

  // store the interval so we can compute the exit planes when/if we need
  // to traverse to the next node (sibling)
  ray_interval.x = t_min;
  ray_interval.y = t_max;

  bvec3 r = greaterThanEqual(ray_origin + ray_dir * t_min, parent_center);
  return !hit ? -1 : (
    i32(r.x) << 0 |
    i32(r.y) << 1 |
    i32(r.z) << 2
  );
}

bool traverse_parametric(vec3 origin, vec3 dir, vec3 inv_dir) {
  vec3 tree_radius = vec3(ubo.scene.tree_radius);
  vec3 tree_diameter = tree_radius * 2.0;
  vec3 tree_center = ubo.scene.tree_center;

  vec2 ray_interval;
  i32 child = closest_child(
    tree_center,
    ubo.scene.tree_radius,
    origin,
    dir,
    inv_dir,
    ray_interval
  );

  if (child >= 0) {
    writeColor(
      hsl(vec3(float(child) / 8.0, .9, 0.6))
    );
    return true;
  } else {
    writeColor(vec3(0.0));
    return false;
  }
}


void main() {
  vec2 pos = gl_GlobalInvocationID.xy;
  if (pos.y <= 20 && pos.x < 160) {
    writeColor(hsl(
      vec3(floor(pos.x / 20)/8.0, 0.9, 0.6)
    ));
    return;
  }

  vec2 dims = ubo.scene.screen_dims.xy;

  float aspect = dims.x / dims.y;
  vec2 uv = (pos / dims) * 2.0 - 1.0;
  vec3 dir = (vec4(
    uv.x * ubo.scene.pixel_size * aspect,
    uv.y * ubo.scene.pixel_size,
    -1.0,
    1.0
  ) * ubo.scene.view).xyz;

  vec3 inv_dir = 1.0 / dir;
  vec3 eye = ubo.scene.eye.xyz;
  bool hit = false;
  // float tMin;
  // float tMax;
  // bool hit = ray_aabb(
  //   ubo.scene.tree_center - vec3(ubo.scene.tree_radius),
  //   ubo.scene.tree_center + vec3(ubo.scene.tree_radius),
  //   eye,
  //   inv_dir,
  //   tMin,
  //   tMax
  // );

  // imageStore(color, ivec2(pos), vec4(dir * 0.5 + 0.5, 1.0));
  // if (!hit) {
  //   return;
  // }



  // hit = traverse_shadertoy_warvstar(
  //   eye,
  //   dir,
  //   inv_dir
  // );

  hit = traverse_parametric(
    eye,
    dir,
    inv_dir
  );

  // hit = traverse_efficient_svo(
  //   eye,
  //   dir,
  //   inv_dir
  // );

  // imageStore(color, ivec2(pos), hit ? vec4(1.0) : vec4(dir * 0.5 + 0.5, 1.0));
}

