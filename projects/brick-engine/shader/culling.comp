#version 450

#include "../shared.h"

//#define ENABLE_DEBUG
#define INDICES_PER_INSTANCE        (3*3*2)

layout (local_size_x = 64) in;

layout(push_constant) uniform PushConstants {
  DepthPyramidConstants depth_pyramid;
} push;

layout (binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout (binding = 1) uniform sampler2D tex;

layout(std430, binding = 2) buffer Bricks {
  Brick bricks[];
};

layout(std430, binding = 3) buffer Index {
  uint visibility[];
};

layout(std430, binding = 4) buffer Count {
  DrawIndexedIndirectCommand visible_count;
};

layout (binding = 5, r32ui) uniform uimage2D debug_tex;

bool sampleVisibility(uvec2 coordinate, uvec4 mip_rect, float z)
{
    // Unsigned overflow used to test min/max using a single comparison!
    if (coordinate.x - mip_rect.x < mip_rect.z)
    if (coordinate.y - mip_rect.y < mip_rect.w)
    {
        float s = texelFetch(tex, ivec2(coordinate), 0).x;

        // Debug plot to depth pyramid debug texture
        imageAtomicAdd(debug_tex, ivec2(coordinate), 1);

        return s > z;
    }
    return false;
}

void main() {
    int instance = int(gl_GlobalInvocationID.x);
    vec4 instance_pos_rad = bricks[instance].pos;
    vec3 position = instance_pos_rad.xyz;
    float radius = instance_pos_rad.w * 10.0;

    visible_count.instanceCount = 1;

    vec4 position_screen = ubo.scene.worldToScreen * vec4(position, 1.0);
    position_screen.xyz /= position_screen.w;

    position_screen.xy = position_screen.xy * 0.5 + 0.5;

    // Cheap approximation of mip level (not 100% correct)
    float radius_screen = radius / position_screen.w;
    radius_screen *= 256;
    float mip = log2(radius_screen);

    bool visible = false;
    if (position_screen.z > 0)
    {
        visible = true;

        // We have only 7 levels in the pyramid. Skip occlusion culling if bounds is too big.
        if (mip < 7)
        {
            // Calculate query rectangle
            uvec4 mip_rect = image_mip_rect(push.depth_pyramid.diameter, clamp(int(mip), 0, 6));

            uvec2 coordinate = uvec2(position_screen.xy * vec2(mip_rect.zw) - vec2(0.5, 0.5));
            coordinate += mip_rect.xy;

            // TODO: Use min filter or gather, bias Z by radius (front_z instead of center point!)
            float front_z = position_screen.z;
            visible = false;
            visible = visible || sampleVisibility(coordinate + uvec2(0, 0), mip_rect, front_z);
            visible = visible || sampleVisibility(coordinate + uvec2(1, 0), mip_rect, front_z);
            visible = visible || sampleVisibility(coordinate + uvec2(0, 1), mip_rect, front_z);
            visible = visible || sampleVisibility(coordinate + uvec2(1, 1), mip_rect, front_z);
        }
    }

    if (visible)
    {
        // Append visible instance index to the buffer
        uint offset = atomicAdd(visible_count.indexCount, INDICES_PER_INSTANCE);
        visibility[offset / INDICES_PER_INSTANCE] = instance;
    }
}
