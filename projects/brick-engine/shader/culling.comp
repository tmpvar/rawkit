#version 450

#include "../shared.h"

#include "cull.glsl"
#include "quadric-proj.glsl"

//#define ENABLE_DEBUG
#define INDICES_PER_INSTANCE        (3*3*2)

layout (local_size_x = 64) in;

layout (binding = 0) uniform UBO {
  Scene scene;
} ubo;

layout(binding = 1) uniform DepthPyramidUBO {
  DepthPyramidConstants depth_pyramid;
} push;

layout (binding = 2) uniform sampler2D tex;

layout(std430, binding = 3) buffer Bricks {
  Brick bricks[];
};

layout(std430, binding = 4) buffer Index {
  uint visibility[];
};

layout(std430, binding = 5) buffer Count {
  DrawIndexedIndirectCommand visible_count;
};

layout (binding = 6, r32ui) uniform uimage2D debug_tex;

bool sampleVisibility(uvec2 coordinate, uvec4 mip_rect, float z) {

  // Unsigned overflow used to test min/max using a single comparison!
  if (coordinate.x - mip_rect.x < mip_rect.z) {
    if (coordinate.y - mip_rect.y < mip_rect.w) {
      float s = texelFetch(tex, ivec2(coordinate), 0).x;
      // Debug plot to depth pyramid debug texture
      imageAtomicAdd(debug_tex, ivec2(coordinate), 1);
      return z < s + 4.0/MAX_DEPTH;
      return floor(z * MAX_DEPTH) <= floor(s * MAX_DEPTH);
    }
  }

  return false;
}

void main() {
  visible_count.instanceCount = 1;
  int instance = int(gl_GlobalInvocationID.x);

  vec4 instance_pos_rad = bricks[instance].pos;

  if (!dj_culltest(ubo.scene.worldToScreen, instance_pos_rad.xyz, instance_pos_rad.xyz + 1.0)) {
    return;
  }

  vec3 position = instance_pos_rad.xyz + 0.5;
  vec3 to_eye = normalize(position - ubo.scene.eye.xyz);
  float radius = instance_pos_rad.w;
  vec4 position_screen = (ubo.scene.worldToScreen * vec4(position - radius * to_eye, 1.0));

  float conservative_bias = 1.0;
#if 1
  float pointSize = 0.0;
  vec4 nop;
  quadricProj(
    position,
    1.0,
    ubo.scene.worldToScreen,
    ubo.scene.screen_dims.xy,
    nop,
    pointSize
  );

  float mip = floor(log2(pointSize * conservative_bias));
  position_screen.xyz /= position_screen.w;
  position_screen.xy = vec2(position_screen.xy * 0.5 + 0.5);
#else
  position_screen = ubo.scene.worldToScreen * vec4(position, 1.0);
  //position_screen = near;

  position_screen.xyz /= position_screen.w;
  position_screen.xy = position_screen.xy * 0.5 + 0.5;

  // Cheap approximation of mip level (not 100% correct)
  float radius_screen = radius / position_screen.w;
  radius_screen *= 256;
  float mip = floor(log2(radius_screen)) * conservative_bias;
#endif

  // debug mip write
  if (false) {
    for (int dmip = 0; dmip < 7; dmip++) {

      uvec4 mip_rect = image_mip_rect(push.depth_pyramid.diameter, dmip);
      uvec2 coordinate = uvec2(position_screen.xy * vec2(mip_rect.zw) - vec2(0.5));
      coordinate += mip_rect.xy;

      sampleVisibility(coordinate + uvec2(0, 0), mip_rect, 1.0);
      sampleVisibility(coordinate + uvec2(1, 0), mip_rect, 1.0);
      sampleVisibility(coordinate + uvec2(0, 1), mip_rect, 1.0);
      sampleVisibility(coordinate + uvec2(1, 1), mip_rect, 1.0);
    }
    // return;
  }

  bool visible = false;
  if (position_screen.z > 0) {
    visible = true;
    // We have only 7 levels in the pyramid. Skip occlusion culling if bounds is too big.
    if (mip < 7) {
      uvec4 mip_rect = image_mip_rect(push.depth_pyramid.diameter, clamp(int(mip), 0, 6));
      uvec2 coordinate = uvec2(position_screen.xy * vec2(mip_rect.zw) - vec2(0.5, 0.5));
      coordinate += mip_rect.xy;

      // TODO: Use min filter or gather, bias Z by radius (front_z instead of center point!)
      float front_z = position_screen.z + radius / MAX_DEPTH * 2.25;

      visible = false;
      visible = visible || sampleVisibility(coordinate + uvec2(0, 0), mip_rect, front_z);
      visible = visible || sampleVisibility(coordinate + uvec2(1, 0), mip_rect, front_z);
      visible = visible || sampleVisibility(coordinate + uvec2(0, 1), mip_rect, front_z);
      visible = visible || sampleVisibility(coordinate + uvec2(1, 1), mip_rect, front_z);
    }
  }

  if (visible) {
    // Append visible instance index to the buffer
    uint offset = atomicAdd(visible_count.indexCount, INDICES_PER_INSTANCE);
    visibility[offset / INDICES_PER_INSTANCE] = instance;
  }
}
