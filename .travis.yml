language: minimal
cache: ccache
jobs:
  include:
    - os: linux
      dist: focal
      compiler:
        - gcc
    - os: windows
    - os: osx
      osx_image: xcode12u
before_install:
  - mkdir build
  - pushd build
  - |
    if [ "$TRAVIS_OS_NAME" == "windows" ]; then
      choco install python --version 3.8.0
      choco install llvm --version 10.0.0
      choco install -y 7zip.commandline
      choco install visualstudio2019community
      choco install visualstudio2019-workload-nativedesktop
      choco install openssl
      export VS160COMNTOOLS="/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools"
      python -m pip install --upgrade pip
      pip3 install cryptography
      wget -q http://tmpvar.com/llvm-11-windows-release.7z -O llvm.7z
      7z x llvm.7z
      mv llvm C:/Users/travis/build/tmpvar/
      wget -q http://tmpvar.com/vulkansdk/vulkansdk-windows.7z
      7z x vulkansdk-windows.7z
      export VULKAN_SDK="C:/Users/travis/build/tmpvar/rawkit/build/vulkansdk"
      # refreshenv does not seem to work in bash, so reload it manually.
      # Entries in the Machine PATH might contain trailing slashes, drop those.
      # Apply Process paths before Machine to ensure /bin appears before others.
      export PATH="C:\Users\travis\build\tmpvar\rawkit\build\vulkansdk\Bin;C:\Python38;$(powershell -Command '("Process", "Machine" | % {
        [Environment]::GetEnvironmentVariable("PATH", $_) -Split ";" -Replace "\\$", ""
      } | Select -Unique | % { cygpath $_ }) -Join ":"')"
      cmake .. -G "Visual Studio 16 2019" -A x64 -T host=x64 -DLLVM_DIR:PATH=C:/Users/travis/build/tmpvar/llvm/lib/cmake/llvm -DClang_DIR:PATH=C:/Users/travis/build/tmpvar/llvm/lib/cmake/clang > configure.log
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt purge --auto-remove cmake
      sudo rm -rf /usr/local/cmake-3.*
      wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
      sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
      wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
      sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.148-focal.list https://packages.lunarg.com/vulkan/1.2.148/lunarg-vulkan-1.2.148-focal.list
      wget https://apt.llvm.org/llvm.sh
      chmod +x llvm.sh
      sudo ./llvm.sh 11
      # sudo apt-add-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main'
      # sudo apt update
      sudo apt install clang-11 llvm-11 llvm-11-dev libclang-11-dev lld-11
      sudo apt install cmake libvulkan1 vulkan-tools mesa-vulkan-drivers libx11-xcb-dev libxrandr-dev vulkan-sdk
      sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libz-dev libxi-dev
      cmake .. -DLLVM_DIR:PATH=/usr/lib/llvm-11/lib/cmake/llvm/ -DClang_DIR:PATH=/usr/lib/llvm-11/lib/cmake/clang/
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      wget -q http://tmpvar.com/vulkansdk/vulkansdk-macos-1.2.148.1.dmg -O ~/Downloads/vulkan-sdk.dmg
      hdiutil attach ~/Downloads/vulkan-sdk.dmg
      mkdir ~/vulkansdk
      cp -r /Volumes/vulkansdk-macos-*/* ~/vulkansdk/
      . ~/vulkansdk/setup-env.sh
      # wget -q http://tmpvar.com/llvm-10-macos.tar.gz -O ~/llvm-10-macos.tar.gz
      # tar xzf ~/llvm-10-macos.tar.gz -C ~/
      brew install llvm@11
      cmake ..
    fi
install:
  - pip3 install cpp-coveralls
script:
  - cmake --build . --config RelWithDebInfo && ctest -C RelWithDebInfo -V
after_success:
  - cpp-coveralls -r .. -i "lib/" -b $(pwd) --gcov-options '\-lp' --exclude-pattern "CMake.*" --exclude-pattern '.*test.*' --exclude include -E "CMakeFiles" -E build/CMakeFiles -E 'test.*.cpp' --exclude lib/test --exclude src --exclude projects --verbose
#- coveralls -r lib --gcov $(which llvm-cov) --gcov-options '\-lp'